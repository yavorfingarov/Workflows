on:
  workflow_call:
    inputs:
      unit-tests-path:
        required: true
        type: string
      status-gist-id:
        required: true
        type: string
      dotnet-version:
        required: false
        type: string
        default: 7.0.x
      min-coverage:
        required: false
        type: number
        default: 85
    secrets:
      GIST_TOKEN:
        required: true
    outputs:
      timestamp:
        value: ${{ jobs.build.outputs.timestamp }}
      run-next:
        value: ${{ jobs.build.outputs.run-next }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.get-timestamp.outputs.timestamp }}
      run-next: ${{ steps.changed-src.outputs.changed }}
    steps:

      - name: Get timestamp
        id: get-timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT

      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet-version }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run unit tests
        run: >
          dotnet test --no-build --configuration Release --filter UnitTests --logger html
          --collect:"XPlat Code Coverage" --results-directory ./TestResults

      - name: Run integration tests
        run: >
          dotnet test --no-build --configuration Release --filter IntegrationTests --logger html
          --results-directory ./TestResults

      - name: Upload test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: TestResults-${{ steps.get-timestamp.outputs.timestamp }}
          path: |
            ./TestResults/*.html
            **/*.received.*

      - name: Generate test coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.20
        with:
          reports: ./TestResults/**/coverage.cobertura.xml
          targetdir: ./TestCoverageReport
          reporttypes: Html;CsvSummary

      - name: Set up Stryker
        run: dotnet tool install dotnet-stryker --tool-path ./tools
        working-directory: ${{ inputs.unit-tests-path }}

      - name: Run mutation tests
        run: ./tools/dotnet-stryker --config-file stryker-config.yaml --output ${{ github.workspace }}/StrykerOutput
        working-directory: ${{ inputs.unit-tests-path }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: CoverageReport-${{ steps.get-timestamp.outputs.timestamp }}
          path: |
            ./TestCoverageReport/
            ./StrykerOutput/

      - name: Analyze coverage report
        id: analyze-coverage-report
        run: |
          set_output() {
            if [[ -z $3 ]]; then
              echo "::error::Got an empty value for $1."
              exit 1
            fi
            echo "$1=$3$4" >> $GITHUB_OUTPUT
            echo "* $2: **$3$4**" >> $GITHUB_STEP_SUMMARY
          }
          set_lines_of_code() {
            if [[ ${#1} -lt 4 ]]; then
              set_output "lines-of-code" "Lines of code" "$1"
            elif [[ ${#1} -eq 4 ]]; then
              set_output "lines-of-code" "Lines of code" "${1::1}.${1:1:1}" "k"
            elif [[ ${#1} -eq 5 ]]; then
              set_output "lines-of-code" "Lines of code" "${1:0:2}" "k"
            elif [[ ${#1} -eq 6 ]]; then
              set_output "lines-of-code" "Lines of code" "${1:0:3}" "k"
            else
              echo "::error::Got an unsupported value $1 for lines-of-code."
              exit 1
            fi
          }
          check_coverage() {
            if [[ $1 -lt ${{ inputs.min-coverage }} || $2 -lt ${{ inputs.min-coverage }} ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**ERROR: The code coverage is insufficient.**" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          }
          lines_of_code=$(cat ./TestCoverageReport/Summary.csv | grep -Po '(?<=Total lines:;)[0-9]+')
          set_lines_of_code "$lines_of_code"
          test_coverage=$(cat ./TestCoverageReport/Summary.csv | grep -Po '(?<=Line coverage:;)[0-9]+')
          set_output "test-coverage" "Test coverage" "$test_coverage" "%"
          mutation_report_path=$(find ./StrykerOutput -name mutation-report.md)
          mutation_score=$(cat $mutation_report_path | grep -Po '(?<=## The final mutation score is )[0-9]+')
          set_output "mutation-score" "Mutation score" "$mutation_score" "%"
          check_coverage "$test_coverage" "$mutation_score"

      - name: Update lines of code gist
        if: ${{ github.ref_name == 'master' }}
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ inputs.status-gist-id }}
          filename: lines-of-code.json
          label: loc
          message: ${{ steps.analyze-coverage-report.outputs.lines-of-code }}
          color: blue

      - name: Update test coverage gist
        if: ${{ github.ref_name == 'master' }}
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ inputs.status-gist-id }}
          filename: test-coverage.json
          label: test coverage
          message: ${{ steps.analyze-coverage-report.outputs.test-coverage }}
          color: brightgreen

      - name: Update mutation score gist
        if: ${{ github.ref_name == 'master' }}
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: ${{ inputs.status-gist-id }}
          filename: mutation-score.json
          label: mutation score
          message: ${{ steps.analyze-coverage-report.outputs.mutation-score }}
          color: brightgreen

      - name: Check src/ for changes
        if: ${{ github.ref_name == 'master' }}
        id: changed-src
        uses: marceloprado/has-changed-path@v1.0.1
        with:
          paths: ./src
